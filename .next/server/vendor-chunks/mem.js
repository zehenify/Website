"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/mem";
exports.ids = ["vendor-chunks/mem"];
exports.modules = {

/***/ "(ssr)/./node_modules/mem/dist/index.js":
/*!****************************************!*\
  !*** ./node_modules/mem/dist/index.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst mimicFn = __webpack_require__(/*! mimic-fn */ \"(ssr)/./node_modules/mimic-fn/index.js\");\nconst mapAgeCleaner = __webpack_require__(/*! map-age-cleaner */ \"(ssr)/./node_modules/map-age-cleaner/dist/index.js\");\nconst decoratorInstanceMap = new WeakMap();\nconst cacheStore = new WeakMap();\n/**\n[Memoize](https://en.wikipedia.org/wiki/Memoization) functions - An optimization used to speed up consecutive function calls by caching the result of calls with identical input.\n\n@param fn - Function to be memoized.\n\n@example\n```\nimport mem = require('mem');\n\nlet i = 0;\nconst counter = () => ++i;\nconst memoized = mem(counter);\n\nmemoized('foo');\n//=> 1\n\n// Cached as it's the same arguments\nmemoized('foo');\n//=> 1\n\n// Not cached anymore as the arguments changed\nmemoized('bar');\n//=> 2\n\nmemoized('bar');\n//=> 2\n```\n*/\nconst mem = (fn, { cacheKey, cache = new Map(), maxAge } = {}) => {\n    if (typeof maxAge === 'number') {\n        // TODO: Drop after https://github.com/SamVerschueren/map-age-cleaner/issues/5\n        // @ts-expect-error\n        mapAgeCleaner(cache);\n    }\n    const memoized = function (...arguments_) {\n        const key = cacheKey ? cacheKey(arguments_) : arguments_[0];\n        const cacheItem = cache.get(key);\n        if (cacheItem) {\n            return cacheItem.data;\n        }\n        const result = fn.apply(this, arguments_);\n        cache.set(key, {\n            data: result,\n            maxAge: maxAge ? Date.now() + maxAge : Number.POSITIVE_INFINITY\n        });\n        return result;\n    };\n    mimicFn(memoized, fn, {\n        ignoreNonConfigurable: true\n    });\n    cacheStore.set(memoized, cache);\n    return memoized;\n};\n/**\n@returns A [decorator](https://github.com/tc39/proposal-decorators) to memoize class methods or static class methods.\n\n@example\n```\nimport mem = require('mem');\n\nclass Example {\n    index = 0\n\n    @mem.decorator()\n    counter() {\n        return ++this.index;\n    }\n}\n\nclass ExampleWithOptions {\n    index = 0\n\n    @mem.decorator({maxAge: 1000})\n    counter() {\n        return ++this.index;\n    }\n}\n```\n*/\nmem.decorator = (options = {}) => (target, propertyKey, descriptor) => {\n    const input = target[propertyKey];\n    if (typeof input !== 'function') {\n        throw new TypeError('The decorated value must be a function');\n    }\n    delete descriptor.value;\n    delete descriptor.writable;\n    descriptor.get = function () {\n        if (!decoratorInstanceMap.has(this)) {\n            const value = mem(input, options);\n            decoratorInstanceMap.set(this, value);\n            return value;\n        }\n        return decoratorInstanceMap.get(this);\n    };\n};\n/**\nClear all cached data of a memoized function.\n\n@param fn - Memoized function.\n*/\nmem.clear = (fn) => {\n    const cache = cacheStore.get(fn);\n    if (!cache) {\n        throw new TypeError('Can\\'t clear a function that was not memoized!');\n    }\n    if (typeof cache.clear !== 'function') {\n        throw new TypeError('The cache Map can\\'t be cleared!');\n    }\n    cache.clear();\n};\nmodule.exports = mem;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbWVtL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixnQkFBZ0IsbUJBQU8sQ0FBQyx3REFBVTtBQUNsQyxzQkFBc0IsbUJBQU8sQ0FBQywyRUFBaUI7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsc0NBQXNDLElBQUk7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLG9CQUFvQixhQUFhO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktYXBwLy4vbm9kZV9tb2R1bGVzL21lbS9kaXN0L2luZGV4LmpzPzNkYjMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3QgbWltaWNGbiA9IHJlcXVpcmUoXCJtaW1pYy1mblwiKTtcbmNvbnN0IG1hcEFnZUNsZWFuZXIgPSByZXF1aXJlKFwibWFwLWFnZS1jbGVhbmVyXCIpO1xuY29uc3QgZGVjb3JhdG9ySW5zdGFuY2VNYXAgPSBuZXcgV2Vha01hcCgpO1xuY29uc3QgY2FjaGVTdG9yZSA9IG5ldyBXZWFrTWFwKCk7XG4vKipcbltNZW1vaXplXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9NZW1vaXphdGlvbikgZnVuY3Rpb25zIC0gQW4gb3B0aW1pemF0aW9uIHVzZWQgdG8gc3BlZWQgdXAgY29uc2VjdXRpdmUgZnVuY3Rpb24gY2FsbHMgYnkgY2FjaGluZyB0aGUgcmVzdWx0IG9mIGNhbGxzIHdpdGggaWRlbnRpY2FsIGlucHV0LlxuXG5AcGFyYW0gZm4gLSBGdW5jdGlvbiB0byBiZSBtZW1vaXplZC5cblxuQGV4YW1wbGVcbmBgYFxuaW1wb3J0IG1lbSA9IHJlcXVpcmUoJ21lbScpO1xuXG5sZXQgaSA9IDA7XG5jb25zdCBjb3VudGVyID0gKCkgPT4gKytpO1xuY29uc3QgbWVtb2l6ZWQgPSBtZW0oY291bnRlcik7XG5cbm1lbW9pemVkKCdmb28nKTtcbi8vPT4gMVxuXG4vLyBDYWNoZWQgYXMgaXQncyB0aGUgc2FtZSBhcmd1bWVudHNcbm1lbW9pemVkKCdmb28nKTtcbi8vPT4gMVxuXG4vLyBOb3QgY2FjaGVkIGFueW1vcmUgYXMgdGhlIGFyZ3VtZW50cyBjaGFuZ2VkXG5tZW1vaXplZCgnYmFyJyk7XG4vLz0+IDJcblxubWVtb2l6ZWQoJ2JhcicpO1xuLy89PiAyXG5gYGBcbiovXG5jb25zdCBtZW0gPSAoZm4sIHsgY2FjaGVLZXksIGNhY2hlID0gbmV3IE1hcCgpLCBtYXhBZ2UgfSA9IHt9KSA9PiB7XG4gICAgaWYgKHR5cGVvZiBtYXhBZ2UgPT09ICdudW1iZXInKSB7XG4gICAgICAgIC8vIFRPRE86IERyb3AgYWZ0ZXIgaHR0cHM6Ly9naXRodWIuY29tL1NhbVZlcnNjaHVlcmVuL21hcC1hZ2UtY2xlYW5lci9pc3N1ZXMvNVxuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgIG1hcEFnZUNsZWFuZXIoY2FjaGUpO1xuICAgIH1cbiAgICBjb25zdCBtZW1vaXplZCA9IGZ1bmN0aW9uICguLi5hcmd1bWVudHNfKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IGNhY2hlS2V5ID8gY2FjaGVLZXkoYXJndW1lbnRzXykgOiBhcmd1bWVudHNfWzBdO1xuICAgICAgICBjb25zdCBjYWNoZUl0ZW0gPSBjYWNoZS5nZXQoa2V5KTtcbiAgICAgICAgaWYgKGNhY2hlSXRlbSkge1xuICAgICAgICAgICAgcmV0dXJuIGNhY2hlSXRlbS5kYXRhO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50c18pO1xuICAgICAgICBjYWNoZS5zZXQoa2V5LCB7XG4gICAgICAgICAgICBkYXRhOiByZXN1bHQsXG4gICAgICAgICAgICBtYXhBZ2U6IG1heEFnZSA/IERhdGUubm93KCkgKyBtYXhBZ2UgOiBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFlcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgICBtaW1pY0ZuKG1lbW9pemVkLCBmbiwge1xuICAgICAgICBpZ25vcmVOb25Db25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBjYWNoZVN0b3JlLnNldChtZW1vaXplZCwgY2FjaGUpO1xuICAgIHJldHVybiBtZW1vaXplZDtcbn07XG4vKipcbkByZXR1cm5zIEEgW2RlY29yYXRvcl0oaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtZGVjb3JhdG9ycykgdG8gbWVtb2l6ZSBjbGFzcyBtZXRob2RzIG9yIHN0YXRpYyBjbGFzcyBtZXRob2RzLlxuXG5AZXhhbXBsZVxuYGBgXG5pbXBvcnQgbWVtID0gcmVxdWlyZSgnbWVtJyk7XG5cbmNsYXNzIEV4YW1wbGUge1xuICAgIGluZGV4ID0gMFxuXG4gICAgQG1lbS5kZWNvcmF0b3IoKVxuICAgIGNvdW50ZXIoKSB7XG4gICAgICAgIHJldHVybiArK3RoaXMuaW5kZXg7XG4gICAgfVxufVxuXG5jbGFzcyBFeGFtcGxlV2l0aE9wdGlvbnMge1xuICAgIGluZGV4ID0gMFxuXG4gICAgQG1lbS5kZWNvcmF0b3Ioe21heEFnZTogMTAwMH0pXG4gICAgY291bnRlcigpIHtcbiAgICAgICAgcmV0dXJuICsrdGhpcy5pbmRleDtcbiAgICB9XG59XG5gYGBcbiovXG5tZW0uZGVjb3JhdG9yID0gKG9wdGlvbnMgPSB7fSkgPT4gKHRhcmdldCwgcHJvcGVydHlLZXksIGRlc2NyaXB0b3IpID0+IHtcbiAgICBjb25zdCBpbnB1dCA9IHRhcmdldFtwcm9wZXJ0eUtleV07XG4gICAgaWYgKHR5cGVvZiBpbnB1dCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgZGVjb3JhdGVkIHZhbHVlIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICAgIH1cbiAgICBkZWxldGUgZGVzY3JpcHRvci52YWx1ZTtcbiAgICBkZWxldGUgZGVzY3JpcHRvci53cml0YWJsZTtcbiAgICBkZXNjcmlwdG9yLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFkZWNvcmF0b3JJbnN0YW5jZU1hcC5oYXModGhpcykpIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gbWVtKGlucHV0LCBvcHRpb25zKTtcbiAgICAgICAgICAgIGRlY29yYXRvckluc3RhbmNlTWFwLnNldCh0aGlzLCB2YWx1ZSk7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRlY29yYXRvckluc3RhbmNlTWFwLmdldCh0aGlzKTtcbiAgICB9O1xufTtcbi8qKlxuQ2xlYXIgYWxsIGNhY2hlZCBkYXRhIG9mIGEgbWVtb2l6ZWQgZnVuY3Rpb24uXG5cbkBwYXJhbSBmbiAtIE1lbW9pemVkIGZ1bmN0aW9uLlxuKi9cbm1lbS5jbGVhciA9IChmbikgPT4ge1xuICAgIGNvbnN0IGNhY2hlID0gY2FjaGVTdG9yZS5nZXQoZm4pO1xuICAgIGlmICghY2FjaGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2FuXFwndCBjbGVhciBhIGZ1bmN0aW9uIHRoYXQgd2FzIG5vdCBtZW1vaXplZCEnKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBjYWNoZS5jbGVhciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgY2FjaGUgTWFwIGNhblxcJ3QgYmUgY2xlYXJlZCEnKTtcbiAgICB9XG4gICAgY2FjaGUuY2xlYXIoKTtcbn07XG5tb2R1bGUuZXhwb3J0cyA9IG1lbTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mem/dist/index.js\n");

/***/ })

};
;